{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_relay",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_world",
						"type": "address"
					}
				],
				"name": "accrediteRelay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_relay",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_world",
						"type": "address"
					}
				],
				"name": "isAccreditedRelay",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Guillaume Gonnaud 2021",
			"kind": "dev",
			"methods": {
				"accrediteRelay(address,address)": {
					"details": "throw if msg.sender != _world.owner(); Bridges should also implement an alternative way for token publishers to designate relays. ",
					"params": {
						"_relay": "The address you wish to add as a relay",
						"_world": "The world you wish to add as being relayed"
					}
				},
				"isAccreditedRelay(address,address)": {
					"params": {
						"_relay": "The address you wish to check as a relay",
						"_world": "The world you wish to check as being relayed"
					},
					"returns": {
						"_0": "TRUE if _world.owner() == _relay or if the owner did setup _relay as a relay. Otherwise, false."
					}
				}
			},
			"title": "MyNFTBridgeControl",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"accrediteRelay(address,address)": {
					"notice": "Authorize a relay to operate a world's token when in escrow with the bridge"
				},
				"isAccreditedRelay(address,address)": {
					"notice": "Check if an address is designed as a relay for a specific world"
				}
			},
			"notice": "Represent the core bridge functions necessary to setup and interact with potentials migrations",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MyNFTBridge.sol": "MyNFTBridgeControl"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Implementation/ERC721.sol": {
			"keccak256": "0x65dd41da5d50472d6ef2a8c76d102396a351f3813b2a1afadd736937e9f8ee98",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://863d2d6f435040b6ea5148f81d13ae96afb415461e9adc27b20c798a82b4557a",
				"dweb:/ipfs/QmQTAZwJzMQi5ipzb1djjUWmCXCWa62wjhYBQUNY7y8FT3"
			]
		},
		"contracts/MyNFTBridge.sol": {
			"keccak256": "0x0bac3290a98c0dcf383b7ab9b92d0239fc0181137659824ef91449d189812fb5",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://cced83e527d2004e2bc9d8f7fb1e155138c278269acea6cab2fe0771d528f21b",
				"dweb:/ipfs/Qmen7k2Ed4rcEURFGa3pDBzQYcfhUUpcDdYFSoStmw4v7K"
			]
		}
	},
	"version": 1
}