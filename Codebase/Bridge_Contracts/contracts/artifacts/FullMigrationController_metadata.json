{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					}
				],
				"name": "acceptableMigration",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					}
				],
				"name": "onDepartureCallback",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Guillaume Gonnaud 2021",
			"kind": "dev",
			"methods": {
				"acceptableMigration(address,uint256,bytes32,bytes32,bytes32)": {
					"details": "This allows creators to specify the rules they want for their migrated tokens  example : only one allowed destinbation and only a ETHMAINNET <=> MOONBEAM migration, with the  same tokenID allowed.",
					"params": {
						"_destinationTokenId": "An array of 32 bytes representing the tokenId world of the migrated token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_destinationWorld": "An array of 32 bytes representing the destination world of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_originTokenId": "An array of 32 bytes representing the tokenId of the origin token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_originWorld": "An array of 32 bytes representing the origin world of the origin token.  If the destination bridge is on an EVM, it is most likely an address."
					},
					"returns": {
						"_0": "True if the migration is acceptable and can be registered, False if not"
					}
				},
				"onDepartureCallback(address,uint256,bytes32,bytes32,bytes32)": {
					"details": "This allows to do creators to do decentralised synchronous on-chain work if the NFT is now represented by an another token.",
					"params": {
						"_destinationTokenId": "An array of 32 bytes representing the tokenId world of the migrated token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_destinationWorld": "An array of 32 bytes representing the destination world of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_originTokenId": "An array of 32 bytes representing the tokenId of the origin token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_originWorld": "An array of 32 bytes representing the origin world of the origin token.  If the destination bridge is on an EVM, it is most likely an address."
					}
				}
			},
			"title": "FullMigrationController",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptableMigration(address,uint256,bytes32,bytes32,bytes32)": {
					"notice": "Indicate if a token migration path is acceptable"
				},
				"onDepartureCallback(address,uint256,bytes32,bytes32,bytes32)": {
					"notice": "Function that will be called by the bridge when a token is put in Escrow with it"
				}
			},
			"notice": "In order to control where and how their NFT can be fully migrated, creators need to deploy and  register a contract implementing this interface",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MyNFTBridge.sol": "FullMigrationController"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Implementation/ERC721.sol": {
			"keccak256": "0x65dd41da5d50472d6ef2a8c76d102396a351f3813b2a1afadd736937e9f8ee98",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://863d2d6f435040b6ea5148f81d13ae96afb415461e9adc27b20c798a82b4557a",
				"dweb:/ipfs/QmQTAZwJzMQi5ipzb1djjUWmCXCWa62wjhYBQUNY7y8FT3"
			]
		},
		"contracts/MyNFTBridge.sol": {
			"keccak256": "0xd24b9f9c053f4a48c6ebb93242fe8116ad8d87f886f593e5b278c8fd7bc4c87e",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://848c7207ad8c7a4213f05fdb2332e757d776c1bfd0353da9212ddcebc4e5bb45",
				"dweb:/ipfs/QmQVN6mSRL7eMZN7tMjeNAKc6eguba12xH1oRLDqa9hFvj"
			]
		}
	},
	"version": 1
}