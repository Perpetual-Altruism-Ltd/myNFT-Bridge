{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_originOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationBridge",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationOwner",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_signee",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "_migrationHash",
						"type": "bytes32"
					}
				],
				"name": "MigrationDeparturePreRegisteredERC721Full",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_originOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationBridge",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_destinationOwner",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_signee",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "_migrationHash",
						"type": "bytes32"
					}
				],
				"name": "MigrationDeparturePreRegisteredERC721IOU",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "_migrationHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "_escrowHash",
						"type": "bytes32"
					}
				],
				"name": "TokenDepositedInEscrowERC721",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					}
				],
				"name": "acceptedMigrationDestinationERC721Full",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					}
				],
				"name": "acceptedMigrationDestinationERC721IOU",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_originUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_originBridge",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_originOwner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationBridge",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationOwner",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_signee",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_originHeight",
						"type": "bytes32"
					}
				],
				"name": "generateMigrationHashERC721Full",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_originUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_originBridge",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_originOwner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationBridge",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationOwner",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_signee",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_originHeight",
						"type": "bytes32"
					}
				],
				"name": "generateMigrationHashERC721IOU",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_migrationHash",
						"type": "bytes32"
					}
				],
				"name": "getProofOfEscrowHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_migrationHash",
						"type": "bytes32"
					}
				],
				"name": "isMigrationPreRegisteredERC721",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationBridge",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationOwner",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_signee",
						"type": "bytes32"
					}
				],
				"name": "migrateToERC721Full",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_originWorld",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_originTokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationUniverse",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationBridge",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationWorld",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationTokenId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_destinationOwner",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_signee",
						"type": "bytes32"
					}
				],
				"name": "migrateToERC721IOU",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Guillaume Gonnaud 2021",
			"kind": "dev",
			"methods": {
				"acceptedMigrationDestinationERC721Full(address,uint256,bytes32,bytes32,bytes32)": {
					"params": {
						"_destinationTokenId": "An array of 32 bytes representing the tokenId world of the migrated token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_destinationUniverse": "An array of 32 bytes representing the destination universe.  eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
						"_destinationWorld": "An array of 32 bytes representing the destination world of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_originTokenId": "The token ID of the token representing the NFT",
						"_originWorld": "The smart contract address of the token currently representing the NFT"
					},
					"returns": {
						"_0": "TRUE if token can be migrated, FALSE if it can't."
					}
				},
				"acceptedMigrationDestinationERC721IOU(address,uint256,bytes32,bytes32,bytes32)": {
					"params": {
						"_destinationTokenId": "An array of 32 bytes representing the tokenId world of the migrated token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_destinationUniverse": "An array of 32 bytes representing the destination universe.  eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
						"_destinationWorld": "An array of 32 bytes representing the destination world of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_originTokenId": "The token ID of the token representing the NFT",
						"_originWorld": "The smart contract address of the token currently representing the NFT"
					},
					"returns": {
						"_0": "TRUE if token can be migrated, FALSE if it can't."
					}
				},
				"generateMigrationHashERC721Full(bytes32,address,address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)": {
					"params": {
						"_destinationBridge": "An array of 32 bytes representing the destination bridge of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_destinationOwner": "An array of 32 bytes representing the final owner of the migrated token .  If the destination world is on an EVM, it is most likely an address.",
						"_destinationTokenId": "An array of 32 bytes representing the tokenId world of the migrated token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_destinationUniverse": "An array of 32 bytes representing the destination universe.  eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
						"_destinationWorld": "An array of 32 bytes representing the destination world of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_originBridge": "the address of bridge the original token is gonna be in escrow with",
						"_originHeight": "The height of the origin universe (usually block.timestamp) If the owner has access to a private key, it should be the owner.",
						"_originOwner": "The original owner of the token when migration is registered",
						"_originTokenId": "The token ID of the original token representing the NFT",
						"_originUniverse": "The bytes32 identifier of the Universe this bridge is deployed in",
						"_originWorld": "The smart contract address of the original token representing the NFT",
						"_signee": "The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner."
					},
					"returns": {
						"_0": "The bytes32 migrationHash that would be generated in such a migration"
					}
				},
				"generateMigrationHashERC721IOU(bytes32,address,address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)": {
					"params": {
						"_destinationBridge": "An array of 32 bytes representing the destination bridge of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_destinationOwner": "An array of 32 bytes representing the final owner of the migrated token .  If the destination world is on an EVM, it is most likely an address.",
						"_destinationTokenId": "An array of 32 bytes representing the tokenId world of the migrated token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_destinationUniverse": "An array of 32 bytes representing the destination universe.  eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
						"_destinationWorld": "An array of 32 bytes representing the destination world of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_originBridge": "the address of bridge the original token is gonna be in escrow with",
						"_originHeight": "The height of the origin universe (usually block.timestamp) If the owner has access to a private key, it should be the owner.",
						"_originOwner": "The original owner of the token when migration is registered",
						"_originTokenId": "The token ID of the original token representing the NFT",
						"_originUniverse": "The bytes32 identifier of the Universe this bridge is deployed in",
						"_originWorld": "The smart contract address of the original token representing the NFT",
						"_signee": "The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner."
					},
					"returns": {
						"_0": "The bytes32 migrationHash that would be generated in such a migration"
					}
				},
				"getProofOfEscrowHash(bytes32)": {
					"details": "throw if the token has not been deposited for this migration. To prevent front running, please wrap the safeTransfer transaction  and check the deposit using this function.",
					"params": {
						"_migrationHash": "The bytes32 migrationHash that was generated when pre-registering the migration"
					},
					"returns": {
						"_0": "The proof of escrowHash associated with a migration (if any)"
					}
				},
				"isMigrationPreRegisteredERC721(bytes32)": {
					"params": {
						"_migrationHash": "The bytes32 migrationHash that would have been generated when pre-registering the migration"
					},
					"returns": {
						"_0": "TRUE if a migration generating such a hash was pre registered, FALSE if not."
					}
				},
				"migrateToERC721Full(address,uint256,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)": {
					"details": "Throw if _originWorld owner has not set (_destinationUniverse, _destinationWorld) as an accepted migration. Will callback onFullMigration(_destinationWorld, _destinationTokenId); Emit MigrationDeparturePreRegisteredERC721Full Can be called by the owner of the ERC-721 token or one of it's operator/approved address",
					"params": {
						"_destinationBridge": "An array of 32 bytes representing the destination bridge. If the destination bridge is on an EVM, it is most likely an address.",
						"_destinationOwner": "An array of 32 bytes representing the final owner of the migrated token .  If the destination world is on an EVM, it is most likely an address.",
						"_destinationTokenId": "An array of 32 bytes representing the tokenId world of the migrated token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_destinationUniverse": "An array of 32 bytes representing the destination universe.  eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
						"_destinationWorld": "An array of 32 bytes representing the destination world of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_originTokenId": "The token ID of the token representing the NFT",
						"_originWorld": "The smart contract address of the token currently representing the NFT",
						"_signee": "The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner."
					}
				},
				"migrateToERC721IOU(address,uint256,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)": {
					"details": "Throw if _originWorld owner disabled IOU migrations for this world. Emit MigrationDeparturePreRegisteredERC721IOU Can be called by the owner of the ERC-721 token or one of it's operator/approved address The latest migration data would be bound to a token when the token is deposited in escrow",
					"params": {
						"_destinationBridge": "An array of 32 bytes representing the destination bridge. If the destination bridge is on an EVM, it is most likely an address.",
						"_destinationOwner": "An array of 32 bytes representing the final owner of the migrated token .  If the destination world is on an EVM, it is most likely an address.",
						"_destinationTokenId": "An array of 32 bytes representing the tokenId world of the migrated token.  If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
						"_destinationUniverse": "An array of 32 bytes representing the destination universe.  eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
						"_destinationWorld": "An array of 32 bytes representing the destination world of the migrated token.  If the destination bridge is on an EVM, it is most likely an address.",
						"_originTokenId": "The token ID of the token representing the NFT",
						"_originWorld": "The smart contract address of the token currently representing the NFT",
						"_signee": "The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner."
					}
				}
			},
			"title": "MyNFTBridgeERC721Departure",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptedMigrationDestinationERC721Full(address,uint256,bytes32,bytes32,bytes32)": {
					"notice": "Check if an origin NFT token can be migrated to a different token as a full migration"
				},
				"acceptedMigrationDestinationERC721IOU(address,uint256,bytes32,bytes32,bytes32)": {
					"notice": "Check if an origin NFT token can be migrated to a different token as an IOU migration"
				},
				"generateMigrationHashERC721IOU(bytes32,address,address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)": {
					"notice": "Generate a hash that would be generated when registering an IOU ERC721 migration"
				},
				"getProofOfEscrowHash(bytes32)": {
					"notice": "Get the proof of escrow hash associated with a migration hash."
				},
				"isMigrationPreRegisteredERC721(bytes32)": {
					"notice": "Query if a migration generating the given hash has been registered."
				},
				"migrateToERC721Full(address,uint256,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)": {
					"notice": "Declare the intent to migrate an ERC-721 token to a different bridge as a full migration. Calling this functionIt will assume that the migrating owner is the current owner at function call."
				},
				"migrateToERC721IOU(address,uint256,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)": {
					"notice": "Declare the intent to migrate an ERC-721 token to a different bridge as an IOU token. Calling this functionIt will assume that the migrating owner is the current owner at function call."
				}
			},
			"notice": "Represent the core bridge functions necessary to migrate an ERC-721 NFT from the bridge universe",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MyNFTBridge.sol": "MyNFTBridgeERC721Departure"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Implementation/ERC721.sol": {
			"keccak256": "0x65dd41da5d50472d6ef2a8c76d102396a351f3813b2a1afadd736937e9f8ee98",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://863d2d6f435040b6ea5148f81d13ae96afb415461e9adc27b20c798a82b4557a",
				"dweb:/ipfs/QmQTAZwJzMQi5ipzb1djjUWmCXCWa62wjhYBQUNY7y8FT3"
			]
		},
		"contracts/MyNFTBridge.sol": {
			"keccak256": "0x0bac3290a98c0dcf383b7ab9b92d0239fc0181137659824ef91449d189812fb5",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://cced83e527d2004e2bc9d8f7fb1e155138c278269acea6cab2fe0771d528f21b",
				"dweb:/ipfs/Qmen7k2Ed4rcEURFGa3pDBzQYcfhUUpcDdYFSoStmw4v7K"
			]
		}
	},
	"version": 1
}