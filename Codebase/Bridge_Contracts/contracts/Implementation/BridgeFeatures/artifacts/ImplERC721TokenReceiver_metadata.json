{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "_migrationHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "_escrowHash",
						"type": "bytes32"
					}
				],
				"name": "TokenDepositedInEscrowERC721",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Guillaume Gonnaud 2021",
			"kind": "dev",
			"methods": {
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "The ERC721 smart contract calls this function on the recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted.",
					"params": {
						"_tokenId": "The NFT identifier which is being transferred _param _data Additional data with no specified format"
					},
					"returns": {
						"_0": "`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless throwing bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")) === 0x150b7a02"
					}
				}
			},
			"title": "ImplERC721TokenReceiver",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"onERC721Received(address,address,uint256,bytes)": {
					"notice": "Handle the receipt of an NFTThe contract address is always the message sender. _param _operator The address which called `safeTransferFrom` function _param _from The address which previously owned the token"
				}
			},
			"notice": "Handle the safeTransfers of NFT to the bridge",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Implementation/BridgeFeatures/ImplERC721TokenReceiver.sol": "ImplERC721TokenReceiver"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Implementation/BridgeFeatures/ImplERC721TokenReceiver.sol": {
			"keccak256": "0xe01ebb667b214498df9939cfba8010de0cbf6ffbda02972f849b2ff95d8ab930",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://d23bab89e436c4a67ad6863bb26785c1f58c6288090e52fc548c2b6e72c00ee0",
				"dweb:/ipfs/QmZthcKg3iiByHEVfqvXztCxzpmJUgwgSK4uQjEntCtyHh"
			]
		},
		"contracts/Implementation/ERC721.sol": {
			"keccak256": "0xa6297f1856dad920fce8fd672cdc844ea5a8ab0ed28046ccdc717500ea75de23",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://38b70fd581a954de06eb47d6b0a92fdf32618a0787dbf7c6ac3a8f0efe238b44",
				"dweb:/ipfs/QmTs8qdLPSYK3kGPb9Rt2eSJVczKBuYcZXeRZXdFPj2Kbp"
			]
		},
		"contracts/Implementation/ImplMemoryStructure.sol": {
			"keccak256": "0xfb0bb24fc49ef8661f3a194ea431f8bee9f8881cb33c1ac0ec514f4b6c00b321",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://0510f0496b46589d85634128dee397ccb344b82f0f4fedd26908f1ccdaa1c5f6",
				"dweb:/ipfs/QmbFpGXCUPCHKCWfg5AUq1z3o8ypb2aTzSsHo9ZDV7CSLo"
			]
		}
	},
	"version": 1
}